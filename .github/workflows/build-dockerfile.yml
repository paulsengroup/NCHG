# Copyright (C) 2024 Roberto Rossini <roberros@uio.no>
#
# SPDX-License-Identifier: GPL-3.0
#
# This library is free software: you can redistribute it and/or
# modify it under the terms of the GNU Public License as published
# by the Free Software Foundation; either version 3 of the License,
# or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Public License along
# with this library.  If not, see
# <https://www.gnu.org/licenses/>.

name: Build Dockerfile

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/build-dockerfile.yml"
      - ".github/workflows/cache-test-dataset.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "utils/devel/test_docker_image.sh"
      - ".dockerignore"
      - "CMakeLists.txt"
      - "Dockerfile"
      - "conanfile.py"
    tags:
      - "v*.*.*"

  pull_request:
    paths:
      - ".github/workflows/build-dockerfile.yml"
      - ".github/workflows/cache-test-dataset.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "utils/devel/test_docker_image.sh"
      - ".dockerignore"
      - "CMakeLists.txt"
      - "Dockerfile"
      - "conanfile.py"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  cache-test-dataset:
    uses: paulsengroup/hictk/.github/workflows/cache-test-dataset.yml@main
    name: Cache test dataset

  build-dockerfile:
    name: Build Dockerfile
    needs: cache-test-dataset
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      packages: "write"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore test dataset
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.cache-test-dataset.outputs.cache-key }}
          path: test/data/nchg_test_data.tar.zst
          fail-on-cache-miss: true

      - name: Generate build args
        id: build-args
        run: |
          set -e
          set -u
          set -o pipefail

          OS_NAME='ubuntu'
          OS_VERSION='24.04'
          C_COMPILER='clang-19'
          CXX_COMPILER='clang++-19'

          BUILD_BASE_IMAGE="ghcr.io/paulsengroup/ci-docker-images/$OS_NAME-$OS_VERSION-cxx-$C_COMPILER:latest"
          TEST_BASE_IMAGE="$BUILD_BASE_IMAGE"

          FINAL_BASE_IMAGE="docker.io/library/$OS_NAME"
          FINAL_BASE_IMAGE_TAG="$OS_VERSION"
          sudo docker pull "$FINAL_BASE_IMAGE:$FINAL_BASE_IMAGE_TAG"

          FINAL_BASE_IMAGE_DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "$FINAL_BASE_IMAGE:$FINAL_BASE_IMAGE_TAG" | grep -o '[[:alnum:]:]\+$')"

          GIT_HASH="$(git rev-parse HEAD)"
          GIT_SHORT_HASH="$(git rev-parse --short HEAD)"
          CREATION_DATE="$(date --iso-8601)"
          GIT_TAG="$(git for-each-ref 'refs/tags/v*.*.*' --count 1 --sort=-v:refname --format "%(refname:short)"  --points-at HEAD)"
          if [ -z "$GIT_TAG" ]; then
            VERSION="sha-$GIT_SHORT_HASH"
          GIT_TAG=unknown
          else
            VERSION="$GIT_TAG"
          fi

          REPO='${{ github.repository }}'
          REPO_LOWERCASE="${REPO,,}"

          CACHE_REGISTRY="ghcr.io/${REPO_LOWERCASE}:buildcache"

          echo "C_COMPILER=$C_COMPILER" | tee -a "$GITHUB_OUTPUT"
          echo "CXX_COMPILER=$CXX_COMPILER" | tee -a "$GITHUB_OUTPUT"
          echo "FINAL_BASE_IMAGE=$FINAL_BASE_IMAGE" | tee -a "$GITHUB_OUTPUT"
          echo "FINAL_BASE_IMAGE_TAG=$FINAL_BASE_IMAGE_TAG" | tee -a "$GITHUB_OUTPUT"
          echo "BUILD_BASE_IMAGE=$BUILD_BASE_IMAGE" | tee -a "$GITHUB_OUTPUT"
          echo "TEST_BASE_IMAGE=$TEST_BASE_IMAGE" | tee -a "$GITHUB_OUTPUT"
          echo "FINAL_BASE_IMAGE_DIGEST=$FINAL_BASE_IMAGE_DIGEST" | tee -a "$GITHUB_OUTPUT"
          echo "GIT_HASH=$GIT_HASH" | tee -a "$GITHUB_OUTPUT"
          echo "GIT_SHORT_HASH=$GIT_SHORT_HASH" | tee -a "$GITHUB_OUTPUT"
          echo "CREATION_DATE=$CREATION_DATE" | tee -a "$GITHUB_OUTPUT"
          echo "GIT_TAG=$GIT_TAG" | tee -a "$GITHUB_OUTPUT"
          echo "VERSION=$VERSION" | tee -a "$GITHUB_OUTPUT"
          echo "REPO_LOWERCASE=$REPO_LOWERCASE" | tee -a "$GITHUB_OUTPUT"
          echo "CACHE_REGISTRY_X86=$CACHE_REGISTRY-x86" | tee -a "$GITHUB_OUTPUT"
          echo "CACHE_REGISTRY_ARM64=$CACHE_REGISTRY-arm64" | tee -a "$GITHUB_OUTPUT"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # images: ${{ steps.build-args.outputs.REPO_LOWERCASE }},ghcr.io/${{ steps.build-args.outputs.REPO_LOWERCASE }}
          images: ghcr.io/${{ steps.build-args.outputs.REPO_LOWERCASE }}
          flavor: |
            latest=true
          tags: |
            type=semver,priority=1000,pattern={{version}}
            type=sha,priority=900
            type=ref,priority=700,event=branch
            type=ref,priority=600,event=pr

      # - name: Login to DockerHub
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # TODO fixme: https://github.com/paulsengroup/NCHG/pull/51
          # platforms: linux/amd64,linux/arm64
          platforms: linux/amd64

      # TODO fixme: https://github.com/paulsengroup/NCHG/pull/51
      - name: Set up QEMU
        if: false #github.event_name != 'pull_request'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build Docker image (x86)
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          load: true
          push: false
          cache-from: type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_X86 }}
          cache-to: type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_X86 }},mode=max,compression=zstd
          tags: nchg:x86
          platforms: linux/amd64
          build-args: |
            C_COMPILER=${{ steps.build-args.outputs.C_COMPILER }}
            CXX_COMPILER=${{ steps.build-args.outputs.CXX_COMPILER }}
            BUILD_BASE_IMAGE=${{ steps.build-args.outputs.BUILD_BASE_IMAGE }}
            TEST_BASE_IMAGE=${{ steps.build-args.outputs.TEST_BASE_IMAGE }}
            FINAL_BASE_IMAGE=${{ steps.build-args.outputs.FINAL_BASE_IMAGE }}
            FINAL_BASE_IMAGE_TAG=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_TAG }}
            FINAL_BASE_IMAGE_DIGEST=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_DIGEST }}
            GIT_HASH=${{ steps.build-args.outputs.GIT_HASH }}
            GIT_SHORT_HASH=${{ steps.build-args.outputs.GIT_SHORT_HASH }}
            CREATION_DATE=${{ steps.build-args.outputs.CREATION_DATE }}
            GIT_TAG=${{ steps.build-args.outputs.GIT_TAG }}
            GIT_IS_DIRTY=false
            VERSION=${{ steps.build-args.outputs.VERSION }}

      - name: Extract the test dataset
        run: tar -xf test/data/nchg_test_data.tar.zst test/data/ENCFF447ERX.1000000.cool

      - name: Test Docker image (x86)
        run: utils/devel/test_docker_image.sh nchg:x86

      # TODO fixme: https://github.com/paulsengroup/NCHG/pull/51
      - name: Build Docker image (arm64)
        if: false #github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          push: false
          cache-from: type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_ARM64 }}
          cache-to: type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_ARM64 }},mode=max,compression=zstd
          tags: nchg:arm64
          platforms: linux/arm64
          build-args: |
            C_COMPILER=${{ steps.build-args.outputs.C_COMPILER }}
            CXX_COMPILER=${{ steps.build-args.outputs.CXX_COMPILER }}
            BUILD_BASE_IMAGE=${{ steps.build-args.outputs.BUILD_BASE_IMAGE }}
            TEST_BASE_IMAGE=${{ steps.build-args.outputs.TEST_BASE_IMAGE }}
            FINAL_BASE_IMAGE=${{ steps.build-args.outputs.FINAL_BASE_IMAGE }}
            FINAL_BASE_IMAGE_TAG=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_TAG }}
            FINAL_BASE_IMAGE_DIGEST=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_DIGEST }}
            GIT_HASH=${{ steps.build-args.outputs.GIT_HASH }}
            GIT_SHORT_HASH=${{ steps.build-args.outputs.GIT_SHORT_HASH }}
            CREATION_DATE=${{ steps.build-args.outputs.CREATION_DATE }}
            GIT_TAG=${{ steps.build-args.outputs.GIT_TAG }}
            GIT_IS_DIRTY=false
            VERSION=${{ steps.build-args.outputs.VERSION }}

      - name: Push image to registries
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          push: true
          cache-from: |
            type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_X86 }}
            type=registry,ref=${{ steps.build-args.outputs.CACHE_REGISTRY_ARM64 }}
          tags: ${{ steps.meta.outputs.tags }}
          # TODO fixme: https://github.com/paulsengroup/NCHG/pull/51
          platforms: linux/amd64
          build-args: |
            C_COMPILER=${{ steps.build-args.outputs.C_COMPILER }}
            CXX_COMPILER=${{ steps.build-args.outputs.CXX_COMPILER }}
            BUILD_BASE_IMAGE=${{ steps.build-args.outputs.BUILD_BASE_IMAGE }}
            TEST_BASE_IMAGE=${{ steps.build-args.outputs.TEST_BASE_IMAGE }}
            FINAL_BASE_IMAGE=${{ steps.build-args.outputs.FINAL_BASE_IMAGE }}
            FINAL_BASE_IMAGE_TAG=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_TAG }}
            FINAL_BASE_IMAGE_DIGEST=${{ steps.build-args.outputs.FINAL_BASE_IMAGE_DIGEST }}
            GIT_HASH=${{ steps.build-args.outputs.GIT_HASH }}
            GIT_SHORT_HASH=${{ steps.build-args.outputs.GIT_SHORT_HASH }}
            CREATION_DATE=${{ steps.build-args.outputs.CREATION_DATE }}
            GIT_TAG=${{ steps.build-args.outputs.GIT_TAG }}
            GIT_IS_DIRTY=false
            VERSION=${{ steps.build-args.outputs.VERSION }}

  build-dockerfile-status-check:
    name: Status Check (Build Dockerfile)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - build-dockerfile

    steps:
      - name: Collect job results
        if: needs.build-dockerfile.result != 'success'
        run: exit 1
